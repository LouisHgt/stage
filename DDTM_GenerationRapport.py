# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DDTM_GenerationRapport
                                 A QGIS plugin
 Génère un rapport PDF
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-04-10
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Louis Huguet
        email                : lshgt@hotmail.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication # type: ignore
from qgis.PyQt.QtGui import QIcon # type: ignore
from qgis.PyQt.QtWidgets import QAction # type: ignore

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .DDTM_GenerationRapport_dialog import DDTM_GenerationRapportDialog
# DEBUT MODIFICATION: Importer la nouvelle classe de dialogue
from .config_dialog import ConfigDialog
# FIN MODIFICATION
import os.path
from .model.CoucheModel import CoucheModel
from .model.ConfigModel import ConfigModel
from .controller.RapportController import RapportController
from qgis.core import QgsProject, Qgis # type: ignore


class DDTM_GenerationRapport:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'DDTM_GenerationRapport_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Génération du rapport PDF')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        
        # Instanciation des objets MVC
        self.configModel = ConfigModel()
        self.coucheModel = CoucheModel()
        self.rapportController = RapportController(self.configModel, self.coucheModel)

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('DDTM_GenerationRapport', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        
        # --- DEBUT MODIFICATION: Ajout d'un nouveau bouton ---

        # Action principale (existante)
        icon_path = ':/plugins/DDTM_GenerationRapport/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Générer un rapport'), # Texte plus clair
            callback=self.run,
            parent=self.iface.mainWindow())

        # Nouvelle action pour la nouvelle boîte de dialogue
        # NOTE: Créez une icône 'icon_settings.png', ajoutez-la à resources.qrc et recompilez resources.py
        # ou réutilisez l'icône existante pour tester.
        settings_icon_path = ':/plugins/DDTM_GenerationRapport/icon.png' 
        self.add_action(
            settings_icon_path, 
            text=self.tr(u'Configurer le plugin'),
            callback=self.open_config_dialog, # Appel à la nouvelle méthode
            parent=self.iface.mainWindow(),
            add_to_toolbar=True) # Mettre `False` si vous ne le voulez que dans le menu

        # --- FIN MODIFICATION ---
        
        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Génération du rapport PDF'), # Le nom du menu doit correspondre à celui dans initGui
                action)
            self.iface.removeToolBarIcon(action)
        

        self.coucheModel.clearTmpFolder()

    def run(self):
        """Run method that performs all the real work"""

        try:
            
            
            # Vérification de la présence d'un projet lancé :
            
            project = QgsProject.instance()
            if not project.fileName():
                # 2. Si non, on informe l'utilisateur via la barre de message de QGIS.
                self.iface.messageBar().pushMessage(
                    "Action impossible",
                    "Veuillez d'abord ouvrir ou sauvegarder un projet QGIS avant de lancer cet outil.",
                    level=Qgis.Warning,
                    duration=7
                )
                
                return
            
            # Create the dialog with elements (after translation) and keep reference
            # Only create GUI ONCE in callback, so that it will only load when the plugin is started
            self.dlg = DDTM_GenerationRapportDialog(self.coucheModel, self.configModel, self.rapportController, parent=self.iface.mainWindow())
            print("Lancement du plugin DDTM_GenerationRapport")
            # show the dialog
            self.dlg.show()
            # Run the dialog event loop
            result = self.dlg.exec_()
            
            # See if OK was pressed
            if result:
                # self.coucheModel.clearTmpFolder()
                pass
                
        except Exception as e:
            print(f"Une erreur s'est produite dans la méthode run : {e}")
            return
    
    # --- DEBUT MODIFICATION: Nouvelle méthode pour lancer la boîte de dialogue de config ---
    def open_config_dialog(self):
        """
        Ouvre la boîte de dialogue de configuration.
        """
        try:
            # Créer une instance de votre nouvelle boîte de dialogue
            # On passe la fenêtre principale de QGIS comme parent
            # et le modèle de configuration si nécessaire.
            config_dlg = ConfigDialog(parent=self.iface.mainWindow(), config_model=self.configModel)
            
            # Affiche la boîte de dialogue de manière modale (bloque le reste de QGIS)
            config_dlg.exec_()
            
            # Après la fermeture de la boîte, vous pouvez exécuter du code ici si besoin,
            # par exemple, recharger une configuration qui a été modifiée.
            print("Boîte de dialogue de configuration fermée.")

        except Exception as e:
            print(f"Une erreur s'est produite en ouvrant la config dialog : {e}")
            return
    # --- FIN MODIFICATION ---