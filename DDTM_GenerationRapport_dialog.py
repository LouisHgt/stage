# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DDTM_GenerationRapportDialog
                                 A QGIS plugin
 DDTM_GenerationRapport
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-04-09
        git sha              : $Format:%H$
        copyright            : (C) 2025 by louislestagiaire
        email                : lshgt@hotmail.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from .controller.FormController import FormController
from .controller.PluginController import PluginController

# --- Imports Qt ---
from qgis.PyQt import uic # type: ignore 
from qgis.PyQt import QtWidgets # type: ignore
from qgis.core import QgsProject, Qgis # type: ignore


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'DDTM_GenerationRapport_dialog_base.ui'))


class DDTM_GenerationRapportDialog(QtWidgets.QDialog, FORM_CLASS):

    def __init__(self, couche_model_inst, config_model_inst, rapport_controller_inst, parent=None):
        super().__init__(parent)
        self.setupUi(self)

        
        # Instancier le contrôleur en passant les instances
        self.pluginController = PluginController(self, couche_model_inst, config_model_inst, rapport_controller_inst)

        try:
            
            # On vérifie que le projet soit lancé, si non on informe l'utilisateur
            if not self.pluginController.checkProject():
                
                parent.iface.messageBar().pushMessage(
                "Action impossible",  # Titre du message
                "Veuillez d'abord ouvrir ou sauvegarder un projet QGIS avant de lancer cet outil.", # Message
                level=Qgis.Warning,  # Niveau de message (Warning, Info, Critical)
                duration=7  # Le message disparaît après 7 secondes
            )
            else:
                
                self.pluginController.initPlugin()
        except Exception as e:
            print(f"Erreur constructeur Dialog: {e}")
            self.close()
            raise


